#!/usr/bin/env perl -w
#
# filewords - print unique words from files
#
# usage:
#       find /dir/path -type f -print | words [-h] [-k] [-i] [-d]
#
#	-h	skip a 'header' (up thru the first blank line)
#	-k	keep going dispite file open & read errors / do not report them
#	-i	fold UPPER to lower case
#	-d	allow digits and _'s in words
#
# Copyright (c) 2015,2023 by Landon Curt Noll.  All Rights Reserved.
#
# Permission to use, copy, modify, and distribute this software and
# its documentation for any purpose and without fee is hereby granted,
# provided that the above copyright, this permission notice and text
# this comment, and the disclaimer below appear in all of the following:
#
#       supporting documentation
#       source copies
#       source works derived from this source
#       binaries derived from this source or from derived source
#
# LANDON CURT NOLL DISCLAIMS ALL WARRANTIES WITH REGARD TO THIS SOFTWARE,
# INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS. IN NO
# EVENT SHALL LANDON CURT NOLL BE LIABLE FOR ANY SPECIAL, INDIRECT OR
# CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM LOSS OF
# USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR
# OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
# PERFORMANCE OF THIS SOFTWARE.
#
# chongo (Landon Curt Noll, http://www.isthe.com/chongo/index.html) /\oo/\
#
# Share and enjoy! :-)

# usage
#
use strict;
use bytes;
use vars qw($opt_h $opt_k $opt_i $opt_d);
use Getopt::Long;

# my vars
#
my $filename;	# current file to open
my $usage;	# usage message
my $line;	# current line of text
my @WORDLINE;	# words from the given line
my %wordlist;	# list of words found and their find count
my $word;	# a given word

# parse args
#
my %optctl = (
    "h" => \$opt_h,
    "k" => \$opt_k,
    "i" => \$opt_i,
    "d" => \$opt_d
);
$opt_h = 0;
$opt_k = 0;
$opt_i = 0;
$opt_d = 0;
$usage = "usage: $0 [-h] [-k] [-i] [-d]";
if (!GetOptions(%optctl)) {
    die("$usage\n");
    exit(1);
}

# process each file
#
while (defined($filename = <>)) {
    
    # open the file
    #
    chomp $filename;
    if (!open(FILE, "<$filename")) {
	if ($opt_k) {
	    # ignore open error
	    next;
	} else {
	    die("$0: cannot open $filename\n");
	}
    }

    # skip header if -h
    #
    if ($opt_h) {
	while (defined($line = <FILE>)) {
	    last if $line =~ /^\n$/;
	}
    }

    # process each line in the file
    #
    while (defined($line = <FILE>)) {

	# canonocalize the line into words
	#
	if ($opt_d) {
	    @WORDLINE = split(/\W+/, $line);
	} else {
	    @WORDLINE = split(/[^a-zA-Z]+/, $line);
	}

	# process each word
	#
	foreach $word ( @WORDLINE ) {

	    # canonocalize the word
	    #
	    next if ($word =~ /^\s*$/);
	    if ($opt_i) {
		$word =~ tr/A-Z/a-z/;
	    }
	    
	    # count old words
	    #
	    if (defined($wordlist{$word})) {
		++$wordlist{$word};

	    # report on a new word
	    #
	    } else {
		print "$word\n";
		$wordlist{$word} = 1;
	    }
	}
    }

    # cleanup file
    #
    close FILE;
}
